#!/usr/bin/env python3
import sys
import os
import re

GlyphsPerRow = 32

LOW = "abcdefghijklmnopqrstuvwxyz"
ChipDefs = [
    # chip, character set, missing ASCII characters,          additional characters
    ( 5050, "English",     "\u201b\u2019[\\]^_{\xa6}~",       []),
    ( 5051, "German",      "\u2019,.:;?@[\\]{\xa6}~DJjL",     {"L.saa5052"}),
    ( 5052, "Swedish",     "\u2019,.:;?$@[\\]^{\xa6}~DJjL",   {"J.saa5051", "j.saa5051", "comma.saa5051", "period.saa5051", "colon.saa5051", "semicolon.saa5051", "question.saa5051",
                                                               "Adieresis", "Odieresis", "Udieresis", "adieresis", "odieresis", "udieresis"}),
    ( 5053, "Italian",     "\u201b\u2019@[\\]^_{\xa6}~",      {"sterling", "quotesingle", "degree", "arrowright", "arrowup", "eacute"}),
    ( 5054, "Belgian",     "\u201b\u2019$@[\\]^_{\xa6}~",     {"quotesingle", "agrave", "eacute", "egrave"}),
    ( 5055, "US-ASCII",    "",                                []),
    ( 5056, "Hebrew",      "\u201b\u2019[\\]^_{\xa6}~" + LOW, {"sterling", "quotesingle", "arrowleft", "arrowright", "arrowup", "onehalf", "threequarters", "divide",  "dblverticalbar"}),
]

GlyphDefs = """
The following glyph data is taken verbatim from CC0-licensed bedstead.c:
http://bjh21.me.uk/bedstead/bedstead.c

A few glyphs that the Bedstead creators missed have been added by this
script's author.

 /* US ASCII (SAA5055) character set */
 {{000,000,000,000,000,000,000,000,000}, 0x0020, "space" },
 {{004,004,004,004,004,000,004,000,000}, 0x0021, "exclam" },
 {{012,012,012,000,000,000,000,000,000}, 0x0022, "quotedbl" },
 {{012,012,037,012,037,012,012,000,000}, 0x0023, "numbersign" },
 {{016,025,024,016,005,025,016,000,000}, 0x0024, "dollar" },
 {{030,031,002,004,010,023,003,000,000}, 0x0025, "percent" },
 {{010,024,024,010,025,022,015,000,000}, 0x0026, "ampersand" },
 {{004,004,010,000,000,000,000,000,000}, 0x2019, "quoteright" },
 {{002,004,010,010,010,004,002,000,000}, 0x0028, "parenleft" },
 {{010,004,002,002,002,004,010,000,000}, 0x0029, "parenright" },
 {{004,025,016,004,016,025,004,000,000}, 0x002a, "asterisk" },
 {{000,004,004,037,004,004,000,000,000}, 0x002b, "plus" },
 {{000,000,000,000,000,004,004,010,000}, 0x002c, "comma"},
 {{000,000,000,016,000,000,000,000,000}, 0x002d, "hyphen" },
 {{000,000,000,000,000,000,004,000,000}, 0x002e, "period"},
 {{000,001,002,004,010,020,000,000,000}, 0x002f, "slash" },
 {{004,012,021,021,021,012,004,000,000}, 0x0030, "zero" },
 {{004,014,004,004,004,004,016,000,000}, 0x0031, "one" },
 {{016,021,001,006,010,020,037,000,000}, 0x0032, "two" },
 {{037,001,002,006,001,021,016,000,000}, 0x0033, "three" },
 {{002,006,012,022,037,002,002,000,000}, 0x0034, "four" },
 {{037,020,036,001,001,021,016,000,000}, 0x0035, "five" },
 {{006,010,020,036,021,021,016,000,000}, 0x0036, "six" },
 {{037,001,002,004,010,010,010,000,000}, 0x0037, "seven" },
 {{016,021,021,016,021,021,016,000,000}, 0x0038, "eight" },
 {{016,021,021,017,001,002,014,000,000}, 0x0039, "nine" },
 {{000,000,004,000,000,000,004,000,000}, 0x003a, "colon"},
 {{000,000,004,000,000,004,004,010,000}, 0x003b, "semicolon"},
 {{002,004,010,020,010,004,002,000,000}, 0x003c, "less" },
 {{000,000,037,000,037,000,000,000,000}, 0x003d, "equal" },
 {{010,004,002,001,002,004,010,000,000}, 0x003e, "greater" },
 {{016,021,002,004,004,000,004,000,000}, 0x003f, "question" },
 {{016,021,027,025,027,020,016,000,000}, 0x0040, "at" },
 {{004,012,021,021,037,021,021,000,000}, 0x0041, "A" },
 {{036,021,021,036,021,021,036,000,000}, 0x0042, "B" },
 {{016,021,020,020,020,021,016,000,000}, 0x0043, "C" },
 {{036,021,021,021,021,021,036,000,000}, 0x0044, "D" },
 {{037,020,020,036,020,020,037,000,000}, 0x0045, "E" },
 {{037,020,020,036,020,020,020,000,000}, 0x0046, "F" },
 {{016,021,020,020,023,021,017,000,000}, 0x0047, "G" },
 {{021,021,021,037,021,021,021,000,000}, 0x0048, "H" },
 {{016,004,004,004,004,004,016,000,000}, 0x0049, "I" },
 {{001,001,001,001,001,021,016,000,000}, 0x004a, "J" },
 {{021,022,024,030,024,022,021,000,000}, 0x004b, "K" },
 {{020,020,020,020,020,020,037,000,000}, 0x004c, "L" },
 {{021,033,025,025,021,021,021,000,000}, 0x004d, "M" },
 {{021,021,031,025,023,021,021,000,000}, 0x004e, "N" },
 {{016,021,021,021,021,021,016,000,000}, 0x004f, "O" },
 {{036,021,021,036,020,020,020,000,000}, 0x0050, "P" },
 {{016,021,021,021,025,022,015,000,000}, 0x0051, "Q" },
 {{036,021,021,036,024,022,021,000,000}, 0x0052, "R" },
 {{016,021,020,016,001,021,016,000,000}, 0x0053, "S" },
 {{037,004,004,004,004,004,004,000,000}, 0x0054, "T" },
 {{021,021,021,021,021,021,016,000,000}, 0x0055, "U" },
 {{021,021,021,012,012,004,004,000,000}, 0x0056, "V" },
 {{021,021,021,025,025,025,012,000,000}, 0x0057, "W" },
 {{021,021,012,004,012,021,021,000,000}, 0x0058, "X" },
 {{021,021,012,004,004,004,004,000,000}, 0x0059, "Y" },
 {{037,001,002,004,010,020,037,000,000}, 0x005a, "Z" },
 {{017,010,010,010,010,010,017,000,000}, 0x005b, "bracketleft" },
 {{000,020,010,004,002,001,000,000,000}, 0x005c, "backslash" },
 {{036,002,002,002,002,002,036,000,000}, 0x005d, "bracketright" },
 {{004,012,021,000,000,000,000,000,000}, 0x005e, "asciicircum" },
 {{000,000,000,000,000,000,037,000,000}, 0x005f, "underscore" },
 {{004,004,002,000,000,000,000,000,000}, 0x201b, "quotereversed" },
 {{000,000,016,001,017,021,017,000,000}, 0x0061, "a" },
 {{020,020,036,021,021,021,036,000,000}, 0x0062, "b" },
 {{000,000,017,020,020,020,017,000,000}, 0x0063, "c" },
 {{001,001,017,021,021,021,017,000,000}, 0x0064, "d" },
 {{000,000,016,021,037,020,016,000,000}, 0x0065, "e" },
 {{002,004,004,016,004,004,004,000,000}, 0x0066, "f" },
 {{000,000,017,021,021,021,017,001,016}, 0x0067, "g" },
 {{020,020,036,021,021,021,021,000,000}, 0x0068, "h" },
 {{004,000,014,004,004,004,016,000,000}, 0x0069, "i" },
 {{004,000,004,004,004,004,004,004,010}, 0x006a, "j" },
 {{010,010,011,012,014,012,011,000,000}, 0x006b, "k" },
 {{014,004,004,004,004,004,016,000,000}, 0x006c, "l" },
 {{000,000,032,025,025,025,025,000,000}, 0x006d, "m" },
 {{000,000,036,021,021,021,021,000,000}, 0x006e, "n" },
 {{000,000,016,021,021,021,016,000,000}, 0x006f, "o" },
 {{000,000,036,021,021,021,036,020,020}, 0x0070, "p" },
 {{000,000,017,021,021,021,017,001,001}, 0x0071, "q" },
 {{000,000,013,014,010,010,010,000,000}, 0x0072, "r" },
 {{000,000,017,020,016,001,036,000,000}, 0x0073, "s" },
 {{004,004,016,004,004,004,002,000,000}, 0x0074, "t" },
 {{000,000,021,021,021,021,017,000,000}, 0x0075, "u" },
 {{000,000,021,021,012,012,004,000,000}, 0x0076, "v" },
 {{000,000,021,021,025,025,012,000,000}, 0x0077, "w" },
 {{000,000,021,012,004,012,021,000,000}, 0x0078, "x" },
 {{000,000,021,021,021,021,017,001,016}, 0x0079, "y" },
 {{000,000,037,002,004,010,037,000,000}, 0x007a, "z" },
 {{003,004,004,010,004,004,003,000,000}, 0x007b, "braceleft" },
 {{004,004,004,000,004,004,004,000,000}, 0x00a6, "brokenbar" },
 {{030,004,004,002,004,004,030,000,000}, 0x007d, "braceright" },
 {{010,025,002,000,000,000,000,000,000}, 0x007e, "asciitilde" },
 {{037,037,037,037,037,037,037,000,000}, 0x25a0, "filledbox" },

 /* Extra characters found in the English (SAA5050) character set */
 {{006,011,010,034,010,010,037,000,000}, 0x00a3, "sterling" },
 {{004,004,004,000,000,000,000,000,000}, 0x0027, "quotesingle" },
 {{000,004,010,037,010,004,000,000,000}, 0x2190, "arrowleft" },
 {{020,020,020,020,026,001,002,004,007}, 0x00bd, "onehalf" },
 {{000,004,002,037,002,004,000,000,000}, 0x2192, "arrowright" },
 {{000,004,016,025,004,004,000,000,000}, 0x2191, "arrowup" },
 {{000,000,000,037,000,000,000,000,000}, 0x2014, "emdash" },
 {{010,010,010,010,011,003,005,007,001}, 0x00bc, "onequarter" },
 {{012,012,012,012,012,012,012,000,000}, 0x2016, "dblverticalbar" },
 {{030,004,030,004,031,003,005,007,001}, 0x00be, "threequarters" },
 {{000,004,000,037,000,004,000,000,000}, 0x00f7, "divide" },

 /* Extra characters found in the German (SAA5051) character set */
 {{000,000,000,000,000,010,010,020,000}, -1, "comma.saa5051" },
 {{000,000,000,000,000,014,014,000,000}, -1, "period.saa5051" },
 {{000,000,000,010,000,000,010,000,000}, -1, "colon.saa5051" },
 {{000,000,010,000,000,010,010,020,000}, -1, "semicolon.saa5051" },
 {{016,021,020,016,021,016,001,021,016}, 0x00a7, "section" },
 {{012,000,016,021,037,021,021,000,000}, 0x00c4, "Adieresis" },
 {{012,000,016,021,021,021,016,000,000}, 0x00d6, "Odieresis" },
 {{012,000,021,021,021,021,016,000,000}, 0x00dc, "Udieresis" },
 {{006,011,006,000,000,000,000,000,000}, 0x00b0, "degree" },
 {{012,000,016,001,017,021,017,000,000}, 0x00e4, "adieresis" },
 {{000,012,000,016,021,021,016,000,000}, 0x00f6, "odieresis" },
 {{000,012,000,021,021,021,017,000,000}, 0x00fc, "udieresis" },
 {{014,022,022,026,021,021,026,020,020}, 0x00df, "germandbls" },
 {{036,011,011,011,011,011,036,000,000}, -1, "D.saa5051" },  // added by KeyJ
 {{002,002,002,002,002,022,014,000,000}, -1, "J.saa5051" },  // added by KeyJ
 {{004,000,014,004,004,004,004,004,010}, -1, "j.saa5051" },  // added by KeyJ
 {{016,021,001,002,004,000,004,000,000}, -1, "question.saa5051" },  // added by KeyJ

 /* Extra characters found in the Swedish (SAA5052) character set */
 {{000,000,021,016,012,016,021,000,000}, 0x00a4, "currency" },
 {{002,004,037,020,036,020,037,000,000}, 0x00c9, "Eacute" },
 {{016,011,011,011,011,011,016,000,000}, -1, "D.saa5052" },
 {{010,010,010,010,010,010,017,000,000}, -1, "L.saa5052" },
 {{004,000,016,021,037,021,021,000,000}, 0x00c5, "Aring" },
 {{002,004,016,021,037,020,016,000,000}, 0x00e9, "eacute" },
 {{004,000,016,001,017,021,017,000,000}, 0x00e5, "aring" },

 /* Extra characters found in the Italian (SAA5053) character set */
 {{000,000,017,020,020,020,017,002,004}, 0x00e7, "ccedilla" },
 {{010,004,021,021,021,021,017,000,000}, 0x00f9, "ugrave" },
 {{010,004,016,001,017,021,017,000,000}, 0x00e0, "agrave" },
 {{010,004,000,016,021,021,016,000,000}, 0x00f2, "ograve" },
 {{010,004,016,021,037,020,016,000,000}, 0x00e8, "egrave" },
 {{010,004,000,014,004,004,016,000,000}, 0x00ec, "igrave" },

 /* Extra characters found in the Belgian (SAA5054) character set */
 {{012,000,014,004,004,004,016,000,000}, 0x00ef, "idieresis" },
 {{012,000,016,021,037,020,016,000,000}, 0x00eb, "edieresis" },
 {{004,012,016,021,037,020,016,000,000}, 0x00ea, "ecircumflex" },
 {{004,002,021,021,021,021,017,000,000}, -1, "ugrave.saa5054" },
 {{004,012,000,014,004,004,016,000,000}, 0x00ee, "icircumflex" },
 {{004,012,016,001,017,021,017,000,000}, 0x00e2, "acircumflex" },
 {{004,012,016,021,021,021,016,000,000}, 0x00f4, "ocircumflex" },
 {{004,012,000,021,021,021,017,000,000}, 0x00fb, "ucircumflex" },
 {{000,000,017,020,020,020,017,002,006}, -1, "ccedilla.saa5054" },

 /* Extra characters found in the Hebrew (SAA5056) character set */
 {{000,021,011,025,022,021,021,000,000}, U(05D0) }, /* alef */
 {{000,016,002,002,002,002,037,000,000}, U(05D1) }, /* bet */
 {{000,003,001,001,003,005,011,000,000}, U(05D2) }, /* gimel */
 {{000,037,002,002,002,002,002,000,000}, U(05D3) }, /* dalet */
 {{000,037,001,001,021,021,021,000,000}, U(05D4) }, /* he */
 {{000,014,004,004,004,004,004,000,000}, U(05D5) }, /* vav */
 {{000,016,004,010,004,004,004,000,000}, U(05D6) }, /* zayin */
 {{000,037,021,021,021,021,021,000,000}, U(05D7) }, /* het */
 {{000,021,023,025,021,021,037,000,000}, U(05D8) }, /* tet */
 {{000,014,004,000,000,000,000,000,000}, U(05D9) }, /* yod */
 {{000,037,001,001,001,001,001,001,000}, U(05DA) }, /* kaffinal */
 {{000,037,001,001,001,001,037,000,000}, U(05DB) }, /* kaf */
 {{020,037,001,001,001,002,014,000,000}, U(05DC) }, /* lamed */
 {{000,037,021,021,021,021,037,000,000}, U(05DD) }, /* memfinal */
 {{000,026,011,021,021,021,027,000,000}, U(05DE) }, /* mem */
 {{000,014,004,004,004,004,004,004,004}, U(05DF) }, /* nunfinal */
 {{000,006,002,002,002,002,016,000,000}, U(05E0) }, /* nun */
 {{000,037,011,021,021,021,016,000,000}, U(05E1) }, /* samekh */
 {{000,011,011,011,011,012,034,000,000}, U(05E2) }, /* ayin */
 {{000,037,011,015,001,001,001,001,000}, U(05E3) }, /* pefinal */
 {{000,037,011,015,001,001,037,000,000}, U(05E4) }, /* pe */
 {{000,031,012,014,010,010,010,010,000}, U(05E5) }, /* tsadifinal */
 {{000,021,021,012,004,002,037,000,000}, U(05E6) }, /* tsadi */
 {{000,037,001,011,011,012,010,010,000}, U(05E7) }, /* qof */
 {{000,037,001,001,001,001,001,000,000}, U(05E8) }, /* resh */
 {{000,025,025,025,031,021,036,000,000}, U(05E9) }, /* shin */
 {{000,017,011,011,011,011,031,000,000}, U(05EA) }, /* tav */
 {{000,000,025,025,016,000,000,000,000}, -1, "oldsheqel" },

 /* Extra characters found in the Cyrillic (SAA5057) character set */
 {{000,000,021,021,035,025,035,000,000}, U(044B) }, /* yeru */
 {{022,025,025,035,025,025,022,000,000}, U(042E) }, /* Iu */
 {{016,021,021,021,037,021,021,000,000}, U(0410) }, /* A */
 {{037,020,020,037,021,021,037,000,000}, U(0411) }, /* Be */
 {{022,022,022,022,022,022,037,001,000}, U(0426) }, /* Tse */
 {{006,012,012,012,012,012,037,021,000}, U(0414) }, /* De */
 {{037,020,020,036,020,020,037,000,000}, U(0415) }, /* Ie */
 {{004,037,025,025,025,037,004,000,000}, U(0424) }, /* Ef */
 {{037,020,020,020,020,020,020,000,000}, U(0413) }, /* Ghe */
 {{021,021,012,004,012,021,021,000,000}, U(0425) }, /* Ha */
 {{021,021,023,025,031,021,021,000,000}, U(0418) }, /* I */
 {{025,021,023,025,031,021,021,000,000}, U(0419) }, /* Ishort */
 {{021,022,024,030,024,022,021,000,000}, U(041A) }, /* Ka */
 {{007,011,011,011,011,011,031,000,000}, U(041B) }, /* El */
 {{021,033,025,025,021,021,021,000,000}, U(041C) }, /* Em */
 {{021,021,021,037,021,021,021,000,000}, U(041D) }, /* En */
 {{016,021,021,021,021,021,016,000,000}, U(041E) }, /* O */
 {{037,021,021,021,021,021,021,000,000}, U(041F) }, /* Pe */
 {{017,021,021,017,005,011,021,000,000}, U(042F) }, /* Ya */
 {{036,021,021,036,020,020,020,000,000}, U(0420) }, /* Er */
 {{016,021,020,020,020,021,016,000,000}, U(0421) }, /* Es */
 {{037,004,004,004,004,004,004,000,000}, U(0422) }, /* Te */
 {{021,021,021,037,001,001,037,000,000}, U(0423) }, /* U */
 {{025,025,025,016,025,025,025,000,000}, U(0416) }, /* Zhe */
 {{036,021,021,036,021,021,036,000,000}, U(0412) }, /* Ve */
 {{020,020,020,037,021,021,037,000,000}, U(042C) }, /* Soft */
 {{030,010,010,017,011,011,017,000,000}, U(042A) }, /* Hard */
 {{016,021,001,006,001,021,016,000,000}, U(0417) }, /* Ze */
 {{025,025,025,025,025,025,037,000,000}, U(0428) }, /* Sha */
 {{014,022,001,007,001,022,014,000,000}, U(042D) }, /* E */
 {{025,025,025,025,025,025,037,001,000}, U(0429) }, /* Shcha */
 {{021,021,021,037,001,001,001,000,000}, U(0427) }, /* Che */
 {{021,021,021,035,025,025,035,000,000}, U(042B) }, /* Yeru */
 {{000,000,022,025,035,025,022,000,000}, U(044E) }, /* yu */
 {{000,000,016,001,017,021,017,000,000}, U(0430) }, /* a */
 {{016,020,036,021,021,021,036,000,000}, U(0431) }, /* be */
 {{000,000,022,022,022,022,037,001,000}, U(0446) }, /* tse */
 {{000,000,006,012,012,012,037,021,000}, U(0434) }, /* de */
 {{000,000,016,021,037,020,016,000,000}, U(0435) }, /* ie */
 {{000,004,016,025,025,025,016,004,000}, U(0444) }, /* ef */
 {{000,000,037,020,020,020,020,000,000}, U(0433) }, /* ghe */
 {{000,000,021,012,004,012,021,000,000}, U(0445) }, /* ha */
 {{000,000,021,023,025,031,021,000,000}, U(0438) }, /* i */
 {{000,004,021,023,025,031,021,000,000}, U(0439) }, /* ishort */
 {{000,000,021,022,034,022,021,000,000}, U(043A) }, /* ka */
 {{000,000,007,011,011,011,031,000,000}, U(043B) }, /* el */
 {{000,000,021,033,025,021,021,000,000}, U(043C) }, /* em */
 {{000,000,021,021,037,021,021,000,000}, U(043D) }, /* en */
 {{000,000,016,021,021,021,016,000,000}, U(043E) }, /* o */
 {{000,000,037,021,021,021,021,000,000}, U(043F) }, /* pe */
 {{000,000,017,021,017,005,031,000,000}, U(044F) }, /* ya */
 {{000,000,036,021,021,021,036,020,020}, U(0440) }, /* er */
 {{000,000,016,021,020,021,016,000,000}, U(0441) }, /* es */
 {{000,000,037,004,004,004,004,000,000}, U(0442) }, /* te */
 {{000,000,021,021,021,021,017,001,016}, U(0443) }, /* u */
 {{000,000,025,025,016,025,025,000,000}, U(0436) }, /* zhe */
 {{000,000,036,021,036,021,036,000,000}, U(0432) }, /* ve */
 {{000,000,020,020,036,021,036,000,000}, U(044C) }, /* soft */
 {{000,000,030,010,016,011,016,000,000}, U(044A) }, /* hard */
 {{000,000,016,021,006,021,016,000,000}, U(0437) }, /* ze */
 {{000,000,025,025,025,025,037,000,000}, U(0448) }, /* sha */
 {{000,000,014,022,006,022,014,000,000}, U(044D) }, /* e */
 {{000,000,025,025,025,025,037,001,000}, U(0449) }, /* shcha */
 {{000,000,021,021,021,017,001,000,000}, U(0447) }, /* che */
"""

AssignedByName = {
    # TODO
}

class Glyph:
    def __init__(self, cp, name, native_chip=5055):
        self.bx, self.by = -1, -1
        self.cp = cp
        self.name = name
        self.native_chip = native_chip
        self.chips = {native_chip}
        self.common = False
    def __str__(self):
        return f"U+{self.cp:04X} {self.name} @ {self.bx},{self.by} (SAA{self.native_chip})"

    def write_map(self, f):
        cp = f"U+{self.cp:04X}".ljust(7)
        f.write(f"    map {self.by:02d}.{self.bx:02d}  {cp} # {self.name}\n")

class Image:
    def __init__(self):
        self.img = []
        self.bx = self.by = 0

    def add(self, glyph:Glyph, bmp:list):
        glyph.bx, glyph.by = self.bx, self.by
        if not self.bx:
            self.img.extend([] for row in bmp)
        for y, row in enumerate(bmp):
            self.img[y-len(bmp)].extend(row)
        self.bx += 1
        if self.bx >= GlyphsPerRow:
            self.nextrow()

    def nextrow(self):
        if self.bx:
            self.by += 1
            self.bx = 0

    def save(self, filename):
        cols = (max(map(len, self.img)) + 7) & (~7)
        with open(filename, 'wb') as f:
            f.write(f"P4\n{cols} {len(self.img)}\n".encode())
            for row in self.img:
                row = row + [0] * (cols - len(row))
                f.write(bytes(sum(row[i+7-b]<<b for b in range(8)) for i in range(0, len(row), 8)))

if __name__ == "__main__":
    img = Image()
    glyphs = []
    cp2glyph = {}
    name2cp = {}
    pua_pos = 0xE800
    chip = None
    for line in GlyphDefs.split('\n'):
        m = re.search(r'\(SAA(505\d)\)', line)
        if m:
            chip = int(m.group(1))
            continue

        m = re.match(r'''
            \s* {{
            (?P<bmp>[0-7,]+)
            }, \s*
            ( U\( (?P<hex1> [0-9a-f]+) \)
            | 0x  (?P<hex2> [0-9a-f]+)
            | -1 )
            \s*
            ( , \s* " (?P<name> [^"]*) " )?
            \s* },
            ( \s* /\* \s* (?P<comment> .*?) \s* \*/ )?
        ''', line, re.I+re.X)
        if not m:
            continue

        # decode raw bitmap (5x9)
        bmp = [int(x, 8) for x in m.group('bmp').split(',')]
        bmp = [[(x >> b) & 1 for b in (4,3,2,1,0)] for x in bmp]

        # add extra borders for interpolation (7x11)
        bmp = [[0] + row + [0] for row in bmp]
        bmp = [[0] * len(bmp[0])] + bmp + [[0] * len(bmp[0])]

        # upscale (14x22)
        bmp = [[row[i>>1] for i in range(len(row)<<1)] for row in bmp]
        bmp = [bmp[i>>1] for i in range(len(bmp)<<1)]

        # diagonal smoothing (stays at 14x22)
        raw = bmp
        bmp = [[0] * len(raw[0])]
        for ia in range(1, len(raw)-1):
            ra, rb = raw[ia], raw[(ia + 1) if (ia & 1) else (ia - 1)]
            bmp.append([0] + [
                ra[i] | (ra[i+1] & rb[i] & (rb[i+1]^1)) | (ra[i-1] & rb[i] & (rb[i-1]^1))
                for i in range(1, len(ra)-1)
            ] + [0])
        bmp.append([0] * len(raw[-1]))

        # remove lower-left extra border, but keep upper-right border (12x20)
        bmp = [row[2:] for row in bmp[:-2]]

        # enter glyph into database
        name = m.group('name') or m.group('comment') or "?"
        basename = name.split('.')[0]
        cp = int(m.group('hex1') or m.group('hex2') or "0", 16)
        if not(cp) and (name in AssignedByName):
            cp = AssignedByName[name]
        if not(cp) and (basename in name2cp):
            cp = name2cp[basename]
        if not cp:
            cp = pua_pos
            pua_pos += 1
        g = Glyph(cp, name, chip)
        img.add(g, bmp)
        glyphs.append(g)
        cp2glyph[cp] = g
        name2cp[name] = cp

    # prepare the block assignment map
    blockmap = []
    for base, rows in ((1,6), (3,8), (5,6)):
        blockmap += [[base] * 6 + [base+1] * 6 for y in range(rows)]

    # add "sextant" block characters
    for sep in (0, 1):
        img.nextrow()
        # map separated sextants into the PUA, contiguous ones into Symbols for Legacy Computing
        cp_counter = 0xEC00 if sep else 0x1FB00
        for raw_code in range(64):
            bits = {b+1 for b in range(6) if ((raw_code >> b) & 1)}
            code = int(''.join(map(str,sorted(bits))) or "0")

            # assign codepoint and name
            cp = 0
            name = f"BLOCK SEXTANT-{code}"
            if sep:
                name = "separated " + name.lower()
            else:
                try:
                    cp, name = {
                        0:      (0x00A0, "NO-BREAK SPACE"),
                        135:    (0x258C, "LEFT HALF BLOCK"),
                        246:    (0x2590, "RIGHT HALF BLOCK"),
                        123456: (0x2588, "FULL BLOCK"),
                    }[code]
                except KeyError:
                    pass
            if not cp:
                cp = cp_counter
                cp_counter += 1

            # synthesize the glyph based on the block assignment map
            g = Glyph(cp, name)
            img.add(g, [[int(x in bits) for x in row] for row in blockmap])
            glyphs.append(g)
            cp2glyph[cp] = g

        # create separated blocks by zeroing out the relevant columns and rows
        # in the block assignment map
        blockmap = [
            ([0] * 12) if y in {4,5, 12,13, 18,19} else
            row[:4] + [0,0] + row[6:10] + [0,0]
        for y, row in enumerate(blockmap)]

    # collect glyphs for the individual chips
    for chip, charset, missing, additional in ChipDefs:
        for g in glyphs:
            if ((g.native_chip == 5055) and not(chr(g.cp) in missing)) \
            or (g.name in additional):
                g.chips.add(chip)
        print(f"SAA{chip} ({charset}):", sum((chip in g.chips) for g in glyphs), "glyphs")

    # generate files
    img.save("saa505x.pbm")
    with open("saa505x.fontspec", "w") as f:
        f.write(f'# this file has been auto-generated by {os.path.basename(sys.argv[0])}\n')
        f.write(f'# do not edit manually!\n\n')
        f.write(f'source "saa505x.pbm" 12x20\n\n')

        # detect and declare common glyphs
        f.write(f'defmap "saa5055common"\n')
        all_chips = {chip for chip, *_ in ChipDefs}
        for g in glyphs:
            g.common = (g.chips >= all_chips)
            if g.common:
                g.write_map(f)
        print(sum(g.common for g in glyphs), "common glyphs")

        # declare fonts and their individual glyphs
        for chip, charset, *_ in ChipDefs:
            f.write(f'\nfont "{chip}" "Mullard SAA{chip} ({charset})"\n')
            f.write(f'    usemap "saa5055common"\n')
            have = set()
            for g in glyphs:
                if (chip in g.chips) and not(g.common):
                    g.write_map(f)
                    have.add(g.name)
            if not("quotesingle" in have) and ("quoteright" in have):
                f.write(f'    alias U+0027 U+2019  # map single quote\n')
            if not any((x in have) for x in LOW):
                f.write(f"    alias 'a'..'z' 'A'..'Z'  # map lowercase to uppercase\n")
